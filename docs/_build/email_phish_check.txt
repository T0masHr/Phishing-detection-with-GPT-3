email_phish_check module
************************

email_phish_check.api_call_completion_endpoint(config: dict, msg_input: str)

   Perform the actual api call to the ‘completion’ endpoint. The
   parameter msg_input is appended to the ‘prompt’ specified in the
   config.

   Parameters:
      * **config** – API configuration as dict loaded from JSON

      * **msg_input** – The actual message body to be analyzed.

   Returns:
      The API response.

email_phish_check.api_calls_on_dict(config: dict, msg_dict: dict) -> dict

   Perform multiple API calls, one call per key-value in the supplied
   dict.

   Parameters:
      * **config** – API configuration as dict loaded from JSON.

      * **msg_dict** – Dictionary with messages to be analyzed.

   Returns:
      Dictionary with all api responses.

email_phish_check.api_response_get_text(response) -> str

   Get the response text from the response JSON.

   Parameters:
      **response** – Response JSON.

   Returns:
      Extracted text.

email_phish_check.custom_text_filter(text: str) -> str

   All the filtering options applied to the message body.

   Parameters:
      **text** – Text to be filtered.

   Returns:
      Filtered text.

email_phish_check.get_paths_list(supplied_path_list: list) -> list

   Transform the supplied paths strings into Path() objects from
   pathlib. If the provided path is a directory, all files in that
   directory are extracted as single paths.

   Parameters:
      **supplied_path_list** – strings supplied by the user

   Returns:
      list with Path() objects

email_phish_check.get_text_from_response_dict(api_result_dict: dict) -> dict

   Iterate over the given dictionary and extract only the actual
   response text from the api response. Return the response texts in
   dict.

   Parameters:
      **api_result_dict** – Dict with the API JSON responses.

   Returns:
      Dict with the filename as key and the textual response as value.

email_phish_check.main()

   First the supplied arguments are handled. Check if any default
   values are changed. Load the API key to be able to communicate with
   OpenAI. All the supplied paths are saved to a dictionary and
   opened. :return: None

email_phish_check.open_file_list(files_list: list) -> dict

   Open all text files from the supplied path list and save the file
   contents in a dictionary, key being the filename and the value the
   file content.

   Parameters:
      **files_list** – list with Path objects

   Returns:
      Dictionary with content from loaded files

email_phish_check.open_message(textfile) -> str

   Open the supplied textfile and return the contents.

   Parameters:
      **textfile** – the file to be opened

   Returns:
      filecontents, newlines are stripped

email_phish_check.parse_api_json_config(configfile)

   Parse the external JSON config file for the openai configuration.

   Parameters:
      **configfile** – path to the config file

   Returns:
      JSON form the config file parsed to dict

email_phish_check.prettyprint_api_text_response_dict(used_api_prompt: str, api_result_text_dict: dict)

   Print the API responses from a dict with the corresponding initial
   prompt in a pretty way.

   Parameters:
      * **used_api_prompt** – The base API prompt, should be loaded
        from the used JSON config.

      * **api_result_text_dict** – Dict with text extracted from the
        API responses.

   Returns:
      None

email_phish_check.query_yes_no(question, default='no')

   Ask a yes/no question via raw_input() and return their answer.

   Parameters:
      * **question** – String that is presented to the user.

      * **default** – The presumed answer if the user just hits
        <Enter>. It must be “yes” (the default), “no” or None (meaning
        an answer is required of the user).

   Returns:
      The “answer” return value is True for “yes” or False for “no”.

email_phish_check.setup_logging(verbosity_level)

   Configure the logging module used in this script. :param
   verbosity_level:  Verbosity level is set with args. :return: None
